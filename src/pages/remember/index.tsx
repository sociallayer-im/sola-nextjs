import {useRouter, useSearchParams} from 'next/navigation'
import {useContext, useEffect, useMemo, useState} from 'react'
import UserContext from "@/components/provider/UserProvider/UserContext";
import usePicture from "@/hooks/pictrue";
import DialogsContext from "@/components/provider/DialogProvider/DialogsContext";
import {Badge, ProfileSimple} from "@/service/solas";
import useformatTime from "@/hooks/formatTime";
import styles from './sbt.module.scss'
import QRcode from "@/components/base/QRcode";
import AppButton from "@/components/base/AppButton/AppButton";
import DialogScanQrCode from "@/components/base/Dialog/DialogScanQrCode/DialogScanQrCode";
import {
    cancelJoinRemember,
    createRememberVoucher,
    getJoinedRemember,
    getRememberMetadata,
    getUserPopupcitys,
    joinRemember,
    mintRemember
} from "@/service/solasv2";
import DialogBindWallet from "@/components/base/Dialog/DialogBindWallet/DialogBindWallet";
import DialogBindEmail from "@/components/base/Dialog/DialogBindEmail/DialogBindEmail";

const popupCityAmount = 0

function Merge() {
    const router = useRouter()
    const {user} = useContext(UserContext)
    const {defaultAvatar} = usePicture()
    const {openConnectWalletDialog, openDialog, showLoading, showToast, showBadgelet} = useContext(DialogsContext)
    const formatTime = useformatTime()
    const [success, setSuccess] = useState(false)
    // 1080
    const [voucherId, setVoucherId] = useState<null | number>(null)
    const [joinedUser, setJoinedUser] = useState<ProfileSimple[]>([])
    const [isJoinedOtherVoucherId, setIsJoinedOtherVoucherId] = useState<null | number>(null)
    const [joinedTargetUser, setJoinedTargetUser] = useState<null | ProfileSimple>(null)
    const [joinedActivityId, setJoinedActivityId] = useState<null | number>(null)
    const [joinedUserPopupcitys, setJoinedUserPopupcitys] = useState<{
        [index: string]: { groups: { id: number, handle: string, image_url: null | string }[] }
    }>({})

    const [rememberBadgeClassId, setRememberBadgeClassId] = useState<null | number>(null)
    const [combineAmount, setCombineAmount] = useState(2)

    const searchParams = useSearchParams()


    useEffect(() => {
        ;(async () => {
            const unloading = showLoading()
            try {
                const metadata = await getRememberMetadata()
                if (!!metadata) {
                    setCombineAmount(metadata.count)
                    setRememberBadgeClassId(metadata.badge_class_id)
                } else {
                    throw new Error('Get metadata failed')
                }
            } catch (e: any) {
                showToast(e.message)
            }
            finally {
                unloading()
            }
        })()
    }, []);


    async function handleCreateRememberVoucher(checkLogin=true) {
        if (!rememberBadgeClassId) return


        if (checkLogin) {
            // if (!user.wallet) {
            //     showBindWalletDialog()
            //     return
            // }

            if (!user.email) {
                showBindEmailDialog()
                return
            }
        }



        const res = await createRememberVoucher({
            auth_token: user.authToken || '',
            badge_class_id: rememberBadgeClassId
        })
        // const str64 = window.btoa('0000' + res.id.toString())
        // console.log('res', str64, window.atob(str64))
        setVoucherId(res.id)
    }

    useEffect(() => {
        ;(async () => {
            if (!user.id) {
                setJoinedTargetUser(null)
                setJoinedUser([])
                setIsJoinedOtherVoucherId(null)
                setJoinedActivityId(null)
                return
            }

            const url = new URL(window.location.href)
            const voucher = url.searchParams.get('voucher')
            if (!!voucher) {
                await handleScanSuccess(voucher)
            }
        })()
    }, [user.id, searchParams])

    useEffect(() => {
        // reset after success
        ;(async () => {
            if (success) {
                setJoinedTargetUser(null)
                setJoinedUser([])
                setIsJoinedOtherVoucherId(null)
                setJoinedActivityId(null)
                setVoucherId(null)
            }
        })()
    }, [success]);

    useEffect(() => {
        let interval: any = null
        if (!user.id) {
            clearInterval(interval)
            return
        }

        if (!!voucherId || !!isJoinedOtherVoucherId) {
            interval = setInterval(async () => {
                const res = await getJoinedRemember({voucher_id: isJoinedOtherVoucherId! || voucherId!})
                setJoinedUser(res.activities.map(a => a.initiator))
                if (res.voucher.counter === 0 && !!isJoinedOtherVoucherId) {
                    showRes(res.badge_class)
                    setSuccess(true)
                    setJoinedUser([])
                    setTimeout(() => {
                        setSuccess(false)
                    }, 1000)
                }
            }, 2000)

            return () => clearInterval(interval)
        }
    }, [voucherId, isJoinedOtherVoucherId]);

    useEffect(() => {
        if (joinedUser.length) {
            getUserPopupcitys({ids: joinedUser.map((u => u.id))}).then(res => setJoinedUserPopupcitys(res))
        }
    }, [joinedUser]);

    const totalPopUpCitys = useMemo(() => {
        let res: { id: number, handle: string, image_url: null | string }[] = []
        Object.values(joinedUserPopupcitys).map(g => {
            g.groups.map(c => {
                if (!res.some(r => r.id === c.id)) {
                    res.push(c)
                }
            })
        })

        return res.splice(0, popupCityAmount)
    }, [joinedUserPopupcitys])

    async function handleScanSuccess(enCodedVoucherId: string) {
        const unloading = showLoading()
        try {
            const voucherId = parseInt(window.atob(enCodedVoucherId))
            const joinInfo = await joinRemember({
                auth_token: user.authToken || '',
                voucher_id: voucherId
            })
            setJoinedTargetUser(joinInfo.sender)
            setIsJoinedOtherVoucherId(voucherId)
            setJoinedActivityId(joinInfo.activity.id)
        } catch (e: any) {
            console.error(e)
            showToast(e.message)
        } finally {
            unloading()
        }
    }

    async function showRes(badge_item: Badge) {
        openDialog({
            content: (close: any) => {
                return <div className={styles['show-res']}>
                    <div className={styles['title']}>You have received</div>
                    <img className={styles['img']} src={badge_item.image_url!} alt=""/>
                    <div className={styles['name']}>{badge_item.title}</div>
                    <svg className={styles['btn']}
                         onClick={() => {
                             close()
                             router.push(`/profile/${user.userName}?tab=2`)
                         }}
                         width="227" height="58" viewBox="0 0 227 58" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <rect width="227" height="58" rx="18" fill="#250258"/>
                        <rect x="3.5" y="3.5" width="220" height="51" rx="15.7555" stroke="#DAD7FF"/>
                        <path
                            d="M77.2356 34.0938C76.5837 34.0938 75.9944 33.9821 75.4675 33.7589C74.9496 33.5357 74.5388 33.2142 74.2352 32.7945C73.9316 32.3748 73.7753 31.8792 73.7664 31.3077H75.7756C75.8024 31.6916 75.9363 31.9953 76.1774 32.2185C76.4274 32.4418 76.7668 32.5534 77.1954 32.5534C77.633 32.5534 77.9768 32.4507 78.2268 32.2453C78.4768 32.031 78.6019 31.7542 78.6019 31.4148C78.6019 31.138 78.517 30.9103 78.3474 30.7317C78.1777 30.5531 77.9634 30.4147 77.7044 30.3165C77.4544 30.2093 77.1061 30.0932 76.6596 29.9682C76.0524 29.7896 75.5568 29.6155 75.1728 29.4458C74.7978 29.2672 74.4718 29.0038 74.195 28.6555C73.9271 28.2983 73.7932 27.825 73.7932 27.2357C73.7932 26.682 73.9316 26.1998 74.2084 25.7891C74.4852 25.3783 74.8737 25.0657 75.3737 24.8514C75.8738 24.6282 76.4453 24.5166 77.0883 24.5166C78.0527 24.5166 78.834 24.7532 79.4323 25.2265C80.0395 25.6908 80.3744 26.3427 80.4369 27.1821H78.3741C78.3563 26.8606 78.2179 26.5972 77.9589 26.3918C77.7089 26.1775 77.374 26.0703 76.9543 26.0703C76.5882 26.0703 76.2935 26.1641 76.0703 26.3516C75.8559 26.5392 75.7488 26.8115 75.7488 27.1687C75.7488 27.4187 75.8291 27.6286 75.9899 27.7983C76.1596 27.959 76.3649 28.0929 76.606 28.2001C76.8561 28.2983 77.2043 28.4144 77.6508 28.5484C78.2581 28.727 78.7537 28.9056 79.1376 29.0841C79.5216 29.2627 79.852 29.5306 80.1288 29.8878C80.4057 30.245 80.5441 30.7138 80.5441 31.2943C80.5441 31.7943 80.4146 32.2587 80.1556 32.6873C79.8967 33.116 79.5172 33.4597 79.0171 33.7187C78.517 33.9687 77.9232 34.0938 77.2356 34.0938ZM89.47 30.1289C89.47 30.3968 89.4521 30.6379 89.4164 30.8522H83.9915C84.0362 31.388 84.2237 31.8077 84.5541 32.1113C84.8845 32.415 85.2908 32.5668 85.773 32.5668C86.4696 32.5668 86.9652 32.2676 87.2598 31.6693H89.2824C89.0681 32.3837 88.6574 32.9731 88.0501 33.4374C87.4429 33.8928 86.6973 34.1206 85.8132 34.1206C85.0988 34.1206 84.4559 33.9643 83.8844 33.6517C83.3218 33.3303 82.8798 32.8793 82.5583 32.2989C82.2458 31.7184 82.0895 31.0487 82.0895 30.2897C82.0895 29.5217 82.2458 28.8475 82.5583 28.2671C82.8709 27.6866 83.3084 27.2401 83.871 26.9276C84.4336 26.6151 85.081 26.4588 85.8132 26.4588C86.5187 26.4588 87.1482 26.6106 87.7019 26.9142C88.2644 27.2178 88.6975 27.6509 89.0012 28.2135C89.3137 28.7671 89.47 29.4056 89.47 30.1289ZM87.5277 29.5931C87.5188 29.1109 87.3447 28.727 87.0053 28.4412C86.666 28.1465 86.2508 27.9992 85.7596 27.9992C85.2953 27.9992 84.9024 28.1421 84.5809 28.4278C84.2684 28.7046 84.0764 29.0931 84.0049 29.5931H87.5277ZM98.1388 30.1289C98.1388 30.3968 98.121 30.6379 98.0853 30.8522H92.6604C92.7051 31.388 92.8926 31.8077 93.223 32.1113C93.5534 32.415 93.9597 32.5668 94.4419 32.5668C95.1384 32.5668 95.634 32.2676 95.9287 31.6693H97.9513C97.737 32.3837 97.3262 32.9731 96.719 33.4374C96.1118 33.8928 95.3661 34.1206 94.4821 34.1206C93.7677 34.1206 93.1248 33.9643 92.5533 33.6517C91.9907 33.3303 91.5487 32.8793 91.2272 32.2989C90.9146 31.7184 90.7584 31.0487 90.7584 30.2897C90.7584 29.5217 90.9146 28.8475 91.2272 28.2671C91.5397 27.6866 91.9773 27.2401 92.5399 26.9276C93.1024 26.6151 93.7499 26.4588 94.4821 26.4588C95.1875 26.4588 95.8171 26.6106 96.3707 26.9142C96.9333 27.2178 97.3664 27.6509 97.67 28.2135C97.9826 28.7671 98.1388 29.4056 98.1388 30.1289ZM96.1966 29.5931C96.1877 29.1109 96.0136 28.727 95.6742 28.4412C95.3349 28.1465 94.9197 27.9992 94.4285 27.9992C93.9642 27.9992 93.5713 28.1421 93.2498 28.4278C92.9372 28.7046 92.7453 29.0931 92.6738 29.5931H96.1966ZM103.021 30.2629C103.021 29.5128 103.168 28.8475 103.463 28.2671C103.766 27.6866 104.173 27.2401 104.682 26.9276C105.2 26.6151 105.776 26.4588 106.41 26.4588C106.963 26.4588 107.446 26.5704 107.856 26.7937C108.276 27.0169 108.611 27.2982 108.861 27.6375V26.5793H110.75V34H108.861V32.915C108.62 33.2633 108.285 33.5535 107.856 33.7857C107.437 34.0089 106.95 34.1206 106.396 34.1206C105.771 34.1206 105.2 33.9598 104.682 33.6383C104.173 33.3169 103.766 32.8659 103.463 32.2855C103.168 31.6961 103.021 31.0219 103.021 30.2629ZM108.861 30.2897C108.861 29.8342 108.772 29.4458 108.593 29.1243C108.414 28.7939 108.173 28.5439 107.87 28.3742C107.566 28.1956 107.24 28.1063 106.892 28.1063C106.544 28.1063 106.222 28.1912 105.927 28.3608C105.633 28.5305 105.392 28.7805 105.204 29.1109C105.026 29.4324 104.936 29.8164 104.936 30.2629C104.936 30.7094 105.026 31.1023 105.204 31.4416C105.392 31.772 105.633 32.0265 105.927 32.2051C106.231 32.3837 106.553 32.473 106.892 32.473C107.24 32.473 107.566 32.3882 107.87 32.2185C108.173 32.0399 108.414 31.7899 108.593 31.4684C108.772 31.138 108.861 30.7451 108.861 30.2897ZM114.858 24.0879V34H112.983V24.0879H114.858ZM118.988 24.0879V34H117.113V24.0879H118.988ZM128.064 34.0938C127.412 34.0938 126.823 33.9821 126.296 33.7589C125.778 33.5357 125.367 33.2142 125.064 32.7945C124.76 32.3748 124.604 31.8792 124.595 31.3077H126.604C126.631 31.6916 126.765 31.9953 127.006 32.2185C127.256 32.4418 127.595 32.5534 128.024 32.5534C128.462 32.5534 128.805 32.4507 129.055 32.2453C129.306 32.031 129.431 31.7542 129.431 31.4148C129.431 31.138 129.346 30.9103 129.176 30.7317C129.006 30.5531 128.792 30.4147 128.533 30.3165C128.283 30.2093 127.935 30.0932 127.488 29.9682C126.881 29.7896 126.385 29.6155 126.001 29.4458C125.626 29.2672 125.301 29.0038 125.024 28.6555C124.756 28.2983 124.622 27.825 124.622 27.2357C124.622 26.682 124.76 26.1998 125.037 25.7891C125.314 25.3783 125.702 25.0657 126.202 24.8514C126.702 24.6282 127.274 24.5166 127.917 24.5166C128.881 24.5166 129.663 24.7532 130.261 25.2265C130.868 25.6908 131.203 26.3427 131.266 27.1821H129.203C129.185 26.8606 129.047 26.5972 128.788 26.3918C128.538 26.1775 128.203 26.0703 127.783 26.0703C127.417 26.0703 127.122 26.1641 126.899 26.3516C126.685 26.5392 126.577 26.8115 126.577 27.1687C126.577 27.4187 126.658 27.6286 126.819 27.7983C126.988 27.959 127.194 28.0929 127.435 28.2001C127.685 28.2983 128.033 28.4144 128.48 28.5484C129.087 28.727 129.582 28.9056 129.966 29.0841C130.35 29.2627 130.681 29.5306 130.958 29.8878C131.234 30.245 131.373 30.7138 131.373 31.2943C131.373 31.7943 131.243 32.2587 130.984 32.6873C130.725 33.116 130.346 33.4597 129.846 33.7187C129.346 33.9687 128.752 34.0938 128.064 34.0938ZM138.705 29.2047C139.232 29.3029 139.665 29.5664 140.004 29.995C140.343 30.4236 140.513 30.9148 140.513 31.4684C140.513 31.9685 140.388 32.4105 140.138 32.7945C139.897 33.1695 139.544 33.4642 139.08 33.6785C138.615 33.8928 138.066 34 137.432 34H133.4V24.6505H137.258C137.892 24.6505 138.437 24.7532 138.892 24.9586C139.357 25.164 139.705 25.4497 139.937 25.8158C140.178 26.182 140.299 26.5972 140.299 27.0615C140.299 27.6063 140.151 28.0617 139.857 28.4278C139.571 28.7939 139.187 29.0529 138.705 29.2047ZM135.276 28.5082H136.99C137.437 28.5082 137.78 28.4099 138.022 28.2135C138.263 28.0081 138.383 27.7179 138.383 27.3428C138.383 26.9678 138.263 26.6776 138.022 26.4722C137.78 26.2668 137.437 26.1641 136.99 26.1641H135.276V28.5082ZM137.164 32.473C137.62 32.473 137.972 32.3658 138.222 32.1515C138.481 31.9372 138.611 31.6336 138.611 31.2407C138.611 30.8389 138.477 30.5263 138.209 30.3031C137.941 30.0709 137.58 29.9548 137.124 29.9548H135.276V32.473H137.164ZM148.772 24.6505V26.1641H146.28V34H144.405V26.1641H141.914V24.6505H148.772ZM153.382 34.1206C152.774 34.1206 152.23 34.0134 151.747 33.7991C151.265 33.5758 150.881 33.2767 150.596 32.9016C150.319 32.5266 150.167 32.1113 150.14 31.6559H152.029C152.064 31.9417 152.203 32.1783 152.444 32.3658C152.694 32.5534 153.002 32.6471 153.368 32.6471C153.725 32.6471 154.002 32.5757 154.199 32.4328C154.404 32.2899 154.507 32.1069 154.507 31.8836C154.507 31.6425 154.382 31.4639 154.132 31.3479C153.891 31.2228 153.502 31.0889 152.966 30.946C152.413 30.8121 151.957 30.6737 151.6 30.5308C151.252 30.3879 150.948 30.1691 150.689 29.8744C150.439 29.5798 150.314 29.1824 150.314 28.6823C150.314 28.2715 150.43 27.8965 150.662 27.5572C150.904 27.2178 151.243 26.9499 151.68 26.7535C152.127 26.557 152.649 26.4588 153.248 26.4588C154.132 26.4588 154.837 26.682 155.364 27.1285C155.891 27.5661 156.181 28.1599 156.235 28.91H154.44C154.413 28.6153 154.288 28.3832 154.065 28.2135C153.85 28.0349 153.56 27.9456 153.194 27.9456C152.855 27.9456 152.591 28.0081 152.404 28.1331C152.225 28.2581 152.136 28.4323 152.136 28.6555C152.136 28.9056 152.261 29.0975 152.511 29.2315C152.761 29.3565 153.149 29.486 153.676 29.6199C154.212 29.7539 154.654 29.8923 155.002 30.0352C155.351 30.178 155.65 30.4013 155.9 30.7049C156.159 30.9996 156.293 31.3925 156.302 31.8836C156.302 32.3123 156.181 32.6962 155.94 33.0356C155.708 33.3749 155.368 33.6428 154.922 33.8393C154.484 34.0268 153.971 34.1206 153.382 34.1206Z"
                            fill="white"/>
                    </svg>
                </div>
            },
            size: [320, 'auto']
        })
    }

    async function showCombine() {
        if (joinedUser.length < combineAmount) {
            showToast(`You need ${combineAmount - joinedUser.length} more people to mint`)
            return
        }

        if (totalPopUpCitys.length < popupCityAmount) {
            showToast(`You need ${popupCityAmount - totalPopUpCitys.length} more popup-city to mint`)
            return
        }

        const handleCombine = async () => {
            const unload = showLoading()
            try {
                const data = await mintRemember({
                    auth_token: user.authToken || '',
                    voucher_id: voucherId || 0
                })
                showRes(data)
                setSuccess(true)
                setJoinedUser([])
                setTimeout(() => {
                    setSuccess(false)
                }, 1000)
            } catch (e: any) {
                console.error(e)
                showToast(e.message)
            } finally {
                unload()
            }
        }

        openDialog({
            content: (close: any) => {
                return <div className={styles['show-combine']}>
                    <div className={styles['title']}>Are you sure you to combine a SBT with these people?</div>
                    {
                        joinedUser.map((u, i) => {
                            return <div className={styles['user-item']} key={i}>
                                <img src={u.image_url || defaultAvatar(u.id)} alt=""/>
                                {u.nickname || u.username || u.handle}
                            </div>
                        })
                    }

                    <div className={styles['btns']}>
                        <AppButton size={'compact'} onClick={close}>Cancel</AppButton>
                        <AppButton size={'compact'} onClick={() => {
                            close()
                            handleCombine()
                        }} special>Combine</AppButton>
                    </div>
                </div>
            },
            size: [320, 'auto']
        })
    }

    async function scan() {
        openDialog({
            content: (close: any) => {
                return <DialogScanQrCode handleClose={close} onScanResult={async (res: string) => {
                    const url = new URL(res)
                    await handleScanSuccess(url.searchParams.get('voucher')!)
                }}/>
            },
            size: ['100%', '100%'],
        })
    }

    async function showBindWalletDialog () {
        openDialog({
            content: (close: any) => {
                return <DialogBindWallet close={close} onSuccess={async () => {
                    await handleCreateRememberVoucher(false)
                }}/>
            },
            size: [320, 'auto'],
        })
    }

    async function showBindEmailDialog () {
        openDialog({
            content: (close: any) => {
                return <DialogBindEmail close={close} onSuccess={async () => {
                    await handleCreateRememberVoucher(false)
                }}/>
            },
            size: [320, 'auto'],
        })
    }

    return (<div>
            <div className={styles['wamo-merge-page']}>
                {success &&
                    <img className={styles['success-animation']} src="/images/merge/success_animation.gif" alt=""/>}
                <div className={styles['center']}>
                    <i className={styles['bg_1']}/>
                    <img className={styles['bg_2']} src="/images/merge/bg.png" alt=""/>
                    <i className={styles['bg_3']}/>
                    <div className={styles['page-header']}>
                        <div className={styles['left']}>
                            <a href={'/'}><img src={'/images/logo.svg'} alt={''}/></a>
                        </div>
                    </div>
                    <div className={styles['main-contain']}>
                        <div className={styles['page-title']}/>
                        <div className={styles['page-des']}>
                            Scan QR code to claim the SBT.
                        </div>

                        {!user.id &&
                            <div className={styles['login-btn']}>
                                <AppButton special onClick={openConnectWalletDialog}> Sign in to Claim</AppButton>
                            </div>
                        }

                        {!!user.id && !voucherId && !joinedTargetUser &&
                            <svg onClick={() => {
                                handleCreateRememberVoucher()
                            }}
                                 className={styles['combine-btn']} width="294" height="58" viewBox="0 0 294 58"
                                 fill="none"
                                 xmlns="http://www.w3.org/2000/svg">
                                <rect width="294" height="58" rx="18" fill="#4B2484"/>
                                <rect x="3.5" y="3.5" width="286" height="51" rx="15.7555" stroke="#DAD7FF"/>
                                <text fill="#fff" x={114} y={36} fontFamily={'serif'} fontWeight={600} fontSize={24}>Start</text>
                            </svg>
                        }

                        {!!user.id && (voucherId || joinedTargetUser) &&
                            <div className={styles['code-bg']}>

                                {
                                    voucherId && !joinedTargetUser && <>
                                        <div className={styles['code']}>
                                            <QRcode size={[147, 147]}
                                                    text={`${window.location.href}?voucher=${window.btoa('0000' + voucherId)}`}/>
                                        </div>
                                    </>
                                }

                                {
                                    !!joinedTargetUser && <>
                                        <img className={styles['target-avatar']}
                                             src={joinedTargetUser.image_url || defaultAvatar(joinedTargetUser.id)}/>
                                        <div
                                            className={styles['target-text']}>{joinedTargetUser.nickname || joinedTargetUser.username || joinedTargetUser.handle} is
                                            combining
                                        </div>
                                    </>
                                }


                                <div className={styles['icons']}>
                                    {
                                        totalPopUpCitys.map((u, i) => {
                                            return <img key={i} src={u.image_url || defaultAvatar(u.id)} alt=""/>
                                        })
                                    }
                                    {
                                        !!voucherId && new Array(Math.max(popupCityAmount - totalPopUpCitys.length, 0)).fill(0).map((_, i) => {
                                            return <svg key={i} width="32" height="32" viewBox="0 0 32 32" fill="none"
                                                        xmlns="http://www.w3.org/2000/svg">
                                                <circle cx="16" cy="16" r="15.6364" fill="#8466B1" stroke="#6A4C96"
                                                        strokeWidth="0.727273"/>
                                                <path
                                                    d="M11.6364 18.1818V18.1891M11.6364 15.2727V15.28M20.3637 18.1818V18.1891M20.3637 15.2727V15.28M17.4546 21.8182V18.1818C17.4546 17.7961 17.3013 17.4261 17.0285 17.1533C16.7558 16.8805 16.3858 16.7273 16 16.7273C15.6143 16.7273 15.2443 16.8805 14.9715 17.1533C14.6987 17.4261 14.5455 17.7961 14.5455 18.1818V21.8182M16.7273 13.0909C16.7273 13.4926 16.4017 13.8182 16 13.8182C15.5984 13.8182 15.2727 13.4926 15.2727 13.0909C15.2727 12.6893 15.5984 12.3637 16 12.3637C16.4017 12.3637 16.7273 12.6893 16.7273 13.0909ZM23.2727 20.3637V11.6364H20.3637L16 8.72729L11.6364 11.6364H8.72729V20.3637C8.72729 20.7494 8.88054 21.1194 9.15332 21.3922C9.4261 21.665 9.79607 21.8182 10.1818 21.8182H21.8182C22.204 21.8182 22.5739 21.665 22.8467 21.3922C23.1195 21.1194 23.2727 20.7494 23.2727 20.3637Z"
                                                    stroke="#9B82BE" strokeWidth="1.45455" strokeLinecap="round"
                                                    strokeLinejoin="round"/>
                                                <circle opacity="0.4" cx="16" cy="16.0001" r="13.5273" stroke="white"
                                                        strokeWidth="0.581818" strokeDasharray="1.45 1.45"/>
                                            </svg>
                                        })
                                    }
                                </div>
                            </div>
                        }

                        <div className={styles['users']}>
                            {joinedUser.map((u, i) => {
                                return <div className={styles['user']} key={i}>
                                    <div>
                                        <img className={styles['avatar']} src={u.image_url || defaultAvatar(user.id)}
                                             alt=""/>
                                        <div className={styles['name']}>{u.nickname || u.username || u.handle}</div>
                                    </div>
                                    <div>
                                        <div className={styles['text']}>Joined</div>
                                        <div className={styles['user-popup-cites']}>
                                            {
                                                joinedUserPopupcitys[u.id.toString()]?.groups.map((g, i) => {
                                                    return <img width={18} height={18} key={i}
                                                                src={g.image_url || defaultAvatar(g.id)} alt=""/>
                                                })
                                            }
                                        </div>
                                    </div>
                                </div>
                            })
                            }

                            {joinedUser.length < combineAmount && !!user.id && (!!joinedTargetUser || !!voucherId) &&
                                <div className={styles['tips']}>Waiting for
                                    other {combineAmount - joinedUser.length} people...</div>}

                            {!joinedTargetUser && !!voucherId && !!user.id && <>
                                <svg
                                    style={{opacity: joinedUser.length >= combineAmount && totalPopUpCitys.length === popupCityAmount ? 1 : 0.2}}
                                    onClick={showCombine}
                                    className={styles['combine-btn']} width="294" height="58" viewBox="0 0 294 58"
                                    fill="none"
                                    xmlns="http://www.w3.org/2000/svg">
                                    <rect width="294" height="58" rx="18" fill="#4B2484"/>
                                    <rect x="3.5" y="3.5" width="286" height="51" rx="15.7555" stroke="#DAD7FF"/>
                                    <text fill="#fff" x={114} y={36} fontFamily={'serif'} fontWeight={600}
                                          fontSize={24}>Start
                                    </text>
                                </svg>
                            </>
                            }

                            {!!user.id && !joinedTargetUser &&
                                <div className={styles['join-other']}>
                                    <div className={styles['tips']}>To join other people</div>
                                    <svg className={styles['combine-btn']}
                                         onClick={scan}
                                         width="294" height="58" viewBox="0 0 294 58" fill="none"
                                         xmlns="http://www.w3.org/2000/svg">
                                        <rect width="294" height="58" rx="18" fill="#B96D3E"/>
                                        <rect x="3.5" y="3.5" width="286" height="51" rx="15.7555"
                                              stroke="#DAD7FF"/>
                                        <g filter="url(#filter0_d_10280_39104)">
                                            <path
                                                d="M103.531 35.16C102.87 35.16 102.31 35.096 101.851 34.968C101.393 34.8293 101.019 34.648 100.731 34.424C100.454 34.2 100.251 33.9547 100.123 33.688C99.9952 33.4107 99.9312 33.1387 99.9312 32.872C99.9312 32.52 100.017 32.2427 100.187 32.04C100.358 31.8267 100.582 31.672 100.859 31.576C101.137 31.48 101.43 31.432 101.739 31.432C101.739 32.4133 101.83 33.16 102.011 33.672C102.203 34.184 102.459 34.536 102.779 34.728C103.099 34.9093 103.467 35 103.883 35C104.523 35 105.046 34.8293 105.451 34.488C105.867 34.1467 106.075 33.6347 106.075 32.952C106.075 32.4507 105.963 32.04 105.739 31.72C105.515 31.3893 105.19 31.1013 104.763 30.856C104.347 30.6107 103.841 30.3653 103.243 30.12C102.689 29.896 102.219 29.6613 101.835 29.416C101.451 29.1707 101.142 28.9093 100.907 28.632C100.673 28.344 100.502 28.04 100.395 27.72C100.299 27.3893 100.251 27.0267 100.251 26.632C100.251 25.9813 100.417 25.416 100.747 24.936C101.078 24.456 101.553 24.0827 102.171 23.816C102.79 23.5493 103.526 23.416 104.379 23.416C105.062 23.416 105.638 23.5013 106.107 23.672C106.587 23.832 106.95 24.0507 107.195 24.328C107.451 24.6053 107.579 24.9147 107.579 25.256C107.579 25.64 107.414 25.96 107.083 26.216C106.763 26.472 106.273 26.6 105.611 26.6C105.611 25.9067 105.553 25.3413 105.435 24.904C105.329 24.4667 105.147 24.1413 104.891 23.928C104.646 23.7147 104.31 23.608 103.883 23.608C103.606 23.608 103.329 23.6613 103.051 23.768C102.774 23.8747 102.545 24.0613 102.363 24.328C102.182 24.5947 102.091 24.9733 102.091 25.464C102.091 25.8693 102.182 26.232 102.363 26.552C102.545 26.8613 102.843 27.1547 103.259 27.432C103.675 27.6987 104.241 27.976 104.955 28.264C105.691 28.5627 106.283 28.872 106.731 29.192C107.19 29.512 107.521 29.8747 107.723 30.28C107.926 30.6747 108.027 31.1333 108.027 31.656C108.027 32.3387 107.851 32.9467 107.499 33.48C107.158 34.0027 106.651 34.4133 105.979 34.712C105.307 35.0107 104.491 35.16 103.531 35.16ZM116.122 35.16C115.333 35.16 114.634 35.0213 114.026 34.744C113.429 34.456 112.965 33.992 112.634 33.352C112.304 32.7013 112.138 31.832 112.138 30.744C112.138 29.592 112.309 28.6907 112.65 28.04C112.992 27.3787 113.461 26.9093 114.058 26.632C114.666 26.3547 115.36 26.216 116.138 26.216C116.789 26.216 117.344 26.2907 117.802 26.44C118.261 26.5787 118.613 26.7813 118.858 27.048C119.104 27.304 119.226 27.6027 119.226 27.944C119.226 28.1467 119.168 28.3493 119.05 28.552C118.944 28.7547 118.741 28.9253 118.442 29.064C118.144 29.192 117.717 29.256 117.162 29.256C117.162 28.52 117.13 27.944 117.066 27.528C117.002 27.112 116.885 26.8187 116.714 26.648C116.554 26.4667 116.33 26.376 116.042 26.376C115.69 26.376 115.408 26.5093 115.194 26.776C114.981 27.0427 114.826 27.4907 114.73 28.12C114.645 28.7493 114.602 29.6187 114.602 30.728C114.602 31.752 114.666 32.5787 114.794 33.208C114.933 33.8267 115.146 34.28 115.434 34.568C115.733 34.8453 116.117 34.984 116.586 34.984C116.96 34.984 117.296 34.9093 117.594 34.76C117.893 34.6 118.144 34.344 118.346 33.992C118.549 33.64 118.682 33.1707 118.746 32.584C118.917 32.6373 119.05 32.7387 119.146 32.888C119.242 33.0373 119.29 33.208 119.29 33.4C119.29 33.6667 119.178 33.9387 118.954 34.216C118.741 34.4827 118.4 34.7067 117.93 34.888C117.461 35.0693 116.858 35.16 116.122 35.16ZM125.664 35.16C125.13 35.16 124.672 35.0587 124.288 34.856C123.904 34.6533 123.61 34.3653 123.408 33.992C123.205 33.608 123.104 33.1653 123.104 32.664C123.104 31.8427 123.402 31.2507 124 30.888C124.597 30.5253 125.493 30.3227 126.688 30.28L128 30.232V28.2C128 27.7307 127.968 27.368 127.904 27.112C127.84 26.8453 127.738 26.6587 127.6 26.552C127.461 26.4347 127.269 26.376 127.024 26.376C126.746 26.376 126.528 26.456 126.368 26.616C126.208 26.7653 126.096 27.0267 126.032 27.4C125.968 27.7627 125.936 28.2693 125.936 28.92C125.221 28.92 124.682 28.84 124.32 28.68C123.957 28.5093 123.776 28.2267 123.776 27.832C123.776 27.448 123.925 27.1387 124.224 26.904C124.522 26.6587 124.922 26.4827 125.424 26.376C125.925 26.2693 126.474 26.216 127.072 26.216C128.192 26.216 129.029 26.4187 129.584 26.824C130.149 27.2293 130.432 27.9333 130.432 28.936V33.704C130.432 33.992 130.458 34.2213 130.512 34.392C130.576 34.552 130.677 34.6693 130.816 34.744C130.965 34.808 131.157 34.84 131.392 34.84H131.456V35H128.032V33.384H128C127.861 33.8427 127.674 34.2 127.44 34.456C127.205 34.712 126.933 34.8933 126.624 35C126.325 35.1067 126.005 35.16 125.664 35.16ZM126.48 34.712C126.789 34.712 127.056 34.5947 127.28 34.36C127.514 34.1253 127.69 33.8213 127.808 33.448C127.936 33.0747 128 32.68 128 32.264V30.392L127.28 30.424C126.853 30.4453 126.517 30.536 126.272 30.696C126.026 30.8453 125.85 31.08 125.744 31.4C125.637 31.7093 125.584 32.1147 125.584 32.616C125.584 33.128 125.616 33.5387 125.68 33.848C125.744 34.1573 125.84 34.3813 125.968 34.52C126.106 34.648 126.277 34.712 126.48 34.712ZM134.794 35V34.84H134.986C135.146 34.84 135.311 34.8187 135.482 34.776C135.663 34.7227 135.813 34.6213 135.93 34.472C136.058 34.3227 136.122 34.0987 136.122 33.8V27.56C136.122 27.272 136.058 27.0587 135.93 26.92C135.802 26.7813 135.647 26.6907 135.466 26.648C135.295 26.6053 135.135 26.584 134.986 26.584H134.794V26.424H138.554V27.88H138.586C138.714 27.4 138.895 27.0427 139.13 26.808C139.365 26.5733 139.637 26.4187 139.946 26.344C140.255 26.2587 140.565 26.216 140.874 26.216C141.813 26.216 142.511 26.4613 142.97 26.952C143.429 27.4427 143.658 28.2267 143.658 29.304V33.704C143.658 34.0347 143.695 34.28 143.77 34.44C143.855 34.6 143.978 34.7067 144.138 34.76C144.298 34.8133 144.495 34.84 144.73 34.84H144.778V35H141.226V28.776C141.226 28.0827 141.135 27.5653 140.954 27.224C140.773 26.872 140.463 26.696 140.026 26.696C139.653 26.696 139.354 26.824 139.13 27.08C138.917 27.336 138.767 27.6933 138.682 28.152C138.597 28.6107 138.554 29.1387 138.554 29.736V33.8C138.554 34.0987 138.613 34.3227 138.73 34.472C138.858 34.6213 139.013 34.7227 139.194 34.776C139.375 34.8187 139.541 34.84 139.69 34.84H139.882V35H134.794ZM163.14 38.84C162.66 38.84 162.185 38.7707 161.716 38.632C161.257 38.4933 160.836 38.2693 160.452 37.96C160.068 37.6613 159.753 37.272 159.508 36.792C159.262 36.3227 159.113 35.752 159.06 35.08C158.1 34.92 157.305 34.584 156.676 34.072C156.046 33.5493 155.572 32.8773 155.252 32.056C154.942 31.2347 154.788 30.3013 154.788 29.256C154.788 28.072 154.985 27.0427 155.38 26.168C155.785 25.2933 156.388 24.616 157.188 24.136C157.998 23.6453 159.012 23.4 160.228 23.4C161.38 23.4 162.356 23.6453 163.156 24.136C163.966 24.616 164.58 25.2987 164.996 26.184C165.412 27.0587 165.62 28.088 165.62 29.272C165.62 30.264 165.47 31.1547 165.172 31.944C164.873 32.7333 164.436 33.3893 163.86 33.912C163.284 34.424 162.574 34.7813 161.732 34.984C161.732 35.6347 161.774 36.1893 161.86 36.648C161.956 37.1173 162.094 37.5013 162.276 37.8C162.468 38.0987 162.708 38.3173 162.996 38.456C163.284 38.6053 163.63 38.68 164.036 38.68H164.292V38.84H163.14ZM160.212 35C160.692 35 161.102 34.8933 161.444 34.68C161.785 34.456 162.062 34.1147 162.276 33.656C162.5 33.1867 162.665 32.5893 162.772 31.864C162.878 31.1387 162.932 30.2747 162.932 29.272C162.932 28.2693 162.878 27.4107 162.772 26.696C162.665 25.9707 162.5 25.3787 162.276 24.92C162.062 24.4507 161.785 24.1093 161.444 23.896C161.102 23.672 160.697 23.56 160.228 23.56C159.748 23.56 159.332 23.672 158.98 23.896C158.638 24.1093 158.356 24.4507 158.132 24.92C157.908 25.3787 157.742 25.9707 157.636 26.696C157.529 27.4107 157.476 28.2693 157.476 29.272C157.476 30.2747 157.529 31.1387 157.636 31.864C157.742 32.5893 157.902 33.1867 158.116 33.656C158.34 34.1147 158.622 34.456 158.964 34.68C159.316 34.8933 159.732 35 160.212 35ZM169.509 35V34.84H170.181C170.331 34.84 170.464 34.8187 170.581 34.776C170.709 34.7333 170.811 34.6427 170.885 34.504C170.96 34.3653 170.997 34.1573 170.997 33.88V24.712C170.997 24.424 170.96 24.2107 170.885 24.072C170.811 23.9333 170.709 23.8427 170.581 23.8C170.464 23.7573 170.331 23.736 170.181 23.736H169.509V23.576H174.661C175.675 23.576 176.501 23.688 177.141 23.912C177.792 24.136 178.272 24.472 178.581 24.92C178.891 25.3573 179.045 25.896 179.045 26.536C179.045 27.1013 178.933 27.5813 178.709 27.976C178.496 28.3707 178.208 28.696 177.845 28.952C177.493 29.208 177.104 29.4107 176.677 29.56L178.453 32.584C178.752 33.096 178.997 33.5067 179.189 33.816C179.392 34.1147 179.563 34.3387 179.701 34.488C179.84 34.6267 179.963 34.7227 180.069 34.776C180.176 34.8187 180.288 34.84 180.405 34.84H180.437V35H179.909C179.429 35 179.008 34.9787 178.645 34.936C178.283 34.8933 177.963 34.8187 177.685 34.712C177.408 34.6053 177.157 34.4507 176.933 34.248C176.72 34.0347 176.523 33.7627 176.341 33.432L174.277 29.656H173.525V33.88C173.525 34.1573 173.563 34.3653 173.637 34.504C173.712 34.6427 173.813 34.7333 173.941 34.776C174.069 34.8187 174.203 34.84 174.341 34.84H175.029V35H169.509ZM174.421 29.496C174.88 29.496 175.248 29.4 175.525 29.208C175.813 29.0053 176.021 28.6907 176.149 28.264C176.288 27.8373 176.357 27.288 176.357 26.616C176.357 25.944 176.288 25.4 176.149 24.984C176.011 24.5573 175.797 24.2427 175.509 24.04C175.221 23.8373 174.848 23.736 174.389 23.736H173.525V29.496H174.421ZM193.823 35.16C193.034 35.16 192.335 35.0213 191.727 34.744C191.13 34.456 190.666 33.992 190.335 33.352C190.005 32.7013 189.839 31.832 189.839 30.744C189.839 29.592 190.01 28.6907 190.351 28.04C190.693 27.3787 191.162 26.9093 191.759 26.632C192.367 26.3547 193.061 26.216 193.839 26.216C194.49 26.216 195.045 26.2907 195.503 26.44C195.962 26.5787 196.314 26.7813 196.559 27.048C196.805 27.304 196.927 27.6027 196.927 27.944C196.927 28.1467 196.869 28.3493 196.751 28.552C196.645 28.7547 196.442 28.9253 196.143 29.064C195.845 29.192 195.418 29.256 194.863 29.256C194.863 28.52 194.831 27.944 194.767 27.528C194.703 27.112 194.586 26.8187 194.415 26.648C194.255 26.4667 194.031 26.376 193.743 26.376C193.391 26.376 193.109 26.5093 192.895 26.776C192.682 27.0427 192.527 27.4907 192.431 28.12C192.346 28.7493 192.303 29.6187 192.303 30.728C192.303 31.752 192.367 32.5787 192.495 33.208C192.634 33.8267 192.847 34.28 193.135 34.568C193.434 34.8453 193.818 34.984 194.287 34.984C194.661 34.984 194.997 34.9093 195.295 34.76C195.594 34.6 195.845 34.344 196.047 33.992C196.25 33.64 196.383 33.1707 196.447 32.584C196.618 32.6373 196.751 32.7387 196.847 32.888C196.943 33.0373 196.991 33.208 196.991 33.4C196.991 33.6667 196.879 33.9387 196.655 34.216C196.442 34.4827 196.101 34.7067 195.631 34.888C195.162 35.0693 194.559 35.16 193.823 35.16ZM204.965 35.16C203.685 35.16 202.677 34.792 201.941 34.056C201.205 33.3093 200.837 32.184 200.837 30.68C200.837 29.176 201.189 28.056 201.893 27.32C202.597 26.584 203.637 26.216 205.013 26.216C206.293 26.216 207.301 26.584 208.037 27.32C208.773 28.056 209.141 29.176 209.141 30.68C209.141 32.184 208.784 33.3093 208.069 34.056C207.365 34.792 206.33 35.16 204.965 35.16ZM204.997 35C205.413 35 205.738 34.8613 205.973 34.584C206.218 34.3067 206.394 33.8533 206.501 33.224C206.608 32.5947 206.661 31.7467 206.661 30.68C206.661 29.6133 206.608 28.7707 206.501 28.152C206.394 27.5227 206.218 27.0693 205.973 26.792C205.728 26.5147 205.402 26.376 204.997 26.376C204.581 26.376 204.25 26.5147 204.005 26.792C203.76 27.0693 203.584 27.5227 203.477 28.152C203.37 28.7707 203.317 29.6133 203.317 30.68C203.317 31.7467 203.37 32.5947 203.477 33.224C203.584 33.8533 203.76 34.3067 204.005 34.584C204.25 34.8613 204.581 35 204.997 35ZM216.473 35.16C215.759 35.16 215.156 35.0053 214.665 34.696C214.185 34.376 213.817 33.8853 213.561 33.224C213.316 32.5627 213.193 31.7147 213.193 30.68C213.193 29.6453 213.316 28.8027 213.561 28.152C213.817 27.5013 214.18 27.0213 214.649 26.712C215.129 26.392 215.711 26.232 216.393 26.232C217.033 26.232 217.561 26.4133 217.977 26.776C218.393 27.128 218.66 27.6773 218.777 28.424H218.809C218.809 27.9973 218.804 27.6027 218.793 27.24C218.793 26.8667 218.793 26.5413 218.793 26.264C218.793 25.976 218.793 25.7467 218.793 25.576V23.976C218.793 23.688 218.729 23.4747 218.601 23.336C218.473 23.1973 218.319 23.1067 218.137 23.064C217.967 23.0213 217.807 23 217.657 23H217.465V22.84H221.225V33.8C221.225 34.0987 221.284 34.3227 221.401 34.472C221.529 34.6213 221.684 34.7227 221.865 34.776C222.047 34.8187 222.212 34.84 222.361 34.84H222.553V35H218.809V32.808H218.777C218.671 33.6187 218.409 34.216 217.993 34.6C217.577 34.9733 217.071 35.16 216.473 35.16ZM217.145 34.76C217.689 34.76 218.1 34.3973 218.377 33.672C218.655 32.9467 218.793 31.8747 218.793 30.456C218.793 29.6133 218.729 28.9093 218.601 28.344C218.473 27.7787 218.287 27.352 218.041 27.064C217.796 26.776 217.487 26.632 217.113 26.632C216.793 26.632 216.521 26.776 216.297 27.064C216.084 27.352 215.924 27.7787 215.817 28.344C215.711 28.9093 215.657 29.6133 215.657 30.456C215.657 31.4053 215.711 32.2 215.817 32.84C215.935 33.48 216.105 33.96 216.329 34.28C216.553 34.6 216.825 34.76 217.145 34.76ZM230.384 35.16C228.997 35.16 227.947 34.776 227.232 34.008C226.517 33.2293 226.16 32.1467 226.16 30.76C226.16 29.256 226.507 28.1253 227.2 27.368C227.893 26.6 228.869 26.216 230.128 26.216C231.291 26.216 232.203 26.5413 232.864 27.192C233.536 27.8427 233.872 28.8027 233.872 30.072V30.456H228.624C228.624 31.5333 228.693 32.408 228.832 33.08C228.981 33.7413 229.211 34.2267 229.52 34.536C229.84 34.8347 230.251 34.984 230.752 34.984C231.125 34.984 231.461 34.904 231.76 34.744C232.069 34.584 232.325 34.328 232.528 33.976C232.741 33.624 232.88 33.1547 232.944 32.568C233.157 32.6107 233.307 32.7013 233.392 32.84C233.488 32.9787 233.536 33.1387 233.536 33.32C233.536 33.6187 233.419 33.912 233.184 34.2C232.949 34.4773 232.597 34.7067 232.128 34.888C231.669 35.0693 231.088 35.16 230.384 35.16ZM231.44 30.296C231.44 29.3253 231.403 28.5573 231.328 27.992C231.253 27.416 231.12 27.0053 230.928 26.76C230.736 26.504 230.469 26.376 230.128 26.376C229.787 26.376 229.504 26.504 229.28 26.76C229.056 27.0053 228.891 27.416 228.784 27.992C228.688 28.5573 228.635 29.3253 228.624 30.296H231.44Z"
                                                fill="white"/>
                                        </g>
                                        <path d="M69.6471 24.6176V20.647H73.6177" stroke="white"
                                              strokeWidth="2.11765"
                                              strokeLinecap="round" strokeLinejoin="round"/>
                                        <path d="M73.6177 36.5294H69.6471V32.5588" stroke="white"
                                              strokeWidth="2.11765"
                                              strokeLinecap="round" strokeLinejoin="round"/>
                                        <path d="M85.5294 32.5588V36.5294H81.5588" stroke="white"
                                              strokeWidth="2.11765"
                                              strokeLinecap="round" strokeLinejoin="round"/>
                                        <path d="M81.5588 20.647H85.5294V24.6176" stroke="white"
                                              strokeWidth="2.11765"
                                              strokeLinecap="round" strokeLinejoin="round"/>
                                        <path d="M71.4118 28.5881H83.7647" stroke="white" strokeWidth="2.11765"
                                              strokeLinecap="round" strokeLinejoin="round"/>
                                        <defs>
                                            <filter id="filter0_d_10280_39104" x="89.9312" y="12.8401"
                                                    width="153.941"
                                                    height="36" filterUnits="userSpaceOnUse"
                                                    colorInterpolationFilters="sRGB">
                                                <feFlood floodOpacity="0" result="BackgroundImageFix"/>
                                                <feColorMatrix in="SourceAlpha" type="matrix"
                                                               values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0"
                                                               result="hardAlpha"/>
                                                <feOffset/>
                                                <feGaussianBlur stdDeviation="5"/>
                                                <feComposite in2="hardAlpha" operator="out"/>
                                                <feColorMatrix type="matrix"
                                                               values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.1 0"/>
                                                <feBlend mode="normal" in2="BackgroundImageFix"
                                                         result="effect1_dropShadow_10280_39104"/>
                                                <feBlend mode="normal" in="SourceGraphic"
                                                         in2="effect1_dropShadow_10280_39104"
                                                         result="shape"/>
                                            </filter>
                                        </defs>
                                    </svg>
                                </div>
                            }

                            {
                                !!joinedTargetUser && !!user.id &&
                                <svg className={styles['combine-btn']}
                                     style={{marginTop: '30px'}}
                                     onClick={async () => {
                                         await cancelJoinRemember({
                                             auth_token: user.authToken || '',
                                             voucher_id: isJoinedOtherVoucherId!
                                         })
                                         setIsJoinedOtherVoucherId(null)
                                         setJoinedTargetUser(null)
                                         setJoinedUser([])
                                     }}
                                     width="112" height="58" viewBox="0 0 112 58" fill="none"
                                     xmlns="http://www.w3.org/2000/svg">
                                    <rect width="112" height="58" rx="18" fill="#B96D3E"/>
                                    <rect x="3.5" y="3.5" width="104" height="51" rx="15.7555" stroke="#DAD7FF"/>
                                    <g filter="url(#filter0_d_10280_40864)">
                                        <path
                                            d="M42.7045 38.84C42.2245 38.84 41.7498 38.7707 41.2805 38.632C40.8218 38.4933 40.4005 38.2693 40.0165 37.96C39.6325 37.6613 39.3178 37.272 39.0725 36.792C38.8272 36.3227 38.6778 35.752 38.6245 35.08C37.6645 34.92 36.8698 34.584 36.2405 34.072C35.6112 33.5493 35.1365 32.8773 34.8165 32.056C34.5072 31.2347 34.3525 30.3013 34.3525 29.256C34.3525 28.072 34.5498 27.0427 34.9445 26.168C35.3498 25.2933 35.9525 24.616 36.7525 24.136C37.5632 23.6453 38.5765 23.4 39.7925 23.4C40.9445 23.4 41.9205 23.6453 42.7205 24.136C43.5312 24.616 44.1445 25.2987 44.5605 26.184C44.9765 27.0587 45.1845 28.088 45.1845 29.272C45.1845 30.264 45.0352 31.1547 44.7365 31.944C44.4378 32.7333 44.0005 33.3893 43.4245 33.912C42.8485 34.424 42.1392 34.7813 41.2965 34.984C41.2965 35.6347 41.3392 36.1893 41.4245 36.648C41.5205 37.1173 41.6592 37.5013 41.8405 37.8C42.0325 38.0987 42.2725 38.3173 42.5605 38.456C42.8485 38.6053 43.1952 38.68 43.6005 38.68H43.8565V38.84H42.7045ZM39.7765 35C40.2565 35 40.6672 34.8933 41.0085 34.68C41.3498 34.456 41.6272 34.1147 41.8405 33.656C42.0645 33.1867 42.2298 32.5893 42.3365 31.864C42.4432 31.1387 42.4965 30.2747 42.4965 29.272C42.4965 28.2693 42.4432 27.4107 42.3365 26.696C42.2298 25.9707 42.0645 25.3787 41.8405 24.92C41.6272 24.4507 41.3498 24.1093 41.0085 23.896C40.6672 23.672 40.2618 23.56 39.7925 23.56C39.3125 23.56 38.8965 23.672 38.5445 23.896C38.2032 24.1093 37.9205 24.4507 37.6965 24.92C37.4725 25.3787 37.3072 25.9707 37.2005 26.696C37.0938 27.4107 37.0405 28.2693 37.0405 29.272C37.0405 30.2747 37.0938 31.1387 37.2005 31.864C37.3072 32.5893 37.4672 33.1867 37.6805 33.656C37.9045 34.1147 38.1872 34.456 38.5285 34.68C38.8805 34.8933 39.2965 35 39.7765 35ZM52.9462 35.16C52.0076 35.16 51.3089 34.9147 50.8502 34.424C50.3916 33.9333 50.1622 33.1493 50.1622 32.072V27.72C50.1622 27.3893 50.1196 27.144 50.0342 26.984C49.9596 26.824 49.8422 26.7173 49.6822 26.664C49.5329 26.6107 49.3356 26.584 49.0902 26.584H49.0422V26.424H52.5942V32.6C52.5942 33.0587 52.6316 33.4427 52.7062 33.752C52.7916 34.0613 52.9196 34.296 53.0902 34.456C53.2716 34.6053 53.5062 34.68 53.7942 34.68C54.1782 34.68 54.4769 34.552 54.6902 34.296C54.9036 34.04 55.0529 33.6827 55.1382 33.224C55.2236 32.7653 55.2662 32.2373 55.2662 31.64V27.624C55.2662 27.3147 55.2022 27.0907 55.0742 26.952C54.9569 26.8027 54.8076 26.7067 54.6262 26.664C54.4556 26.6107 54.2902 26.584 54.1302 26.584H54.0662V26.424H57.6982V33.864C57.6982 34.1413 57.7622 34.3547 57.8903 34.504C58.0182 34.6427 58.1676 34.7333 58.3383 34.776C58.5196 34.8187 58.6849 34.84 58.8342 34.84H58.8982V35H55.2662V33.496H55.2342C55.1382 33.848 55.0102 34.136 54.8502 34.36C54.6902 34.584 54.5089 34.7547 54.3062 34.872C54.1036 34.9787 53.8849 35.0533 53.6502 35.096C53.4156 35.1387 53.1809 35.16 52.9462 35.16ZM62.1301 35V34.84H62.3221C62.4821 34.84 62.6475 34.8187 62.8181 34.776C62.9995 34.7227 63.1488 34.6213 63.2661 34.472C63.3941 34.3227 63.4581 34.0987 63.4581 33.8V27.56C63.4581 27.272 63.3941 27.0587 63.2661 26.92C63.1381 26.7813 62.9835 26.6907 62.8021 26.648C62.6315 26.6053 62.4715 26.584 62.3221 26.584H62.1301V26.424H65.8901V33.8C65.8901 34.0987 65.9488 34.3227 66.0661 34.472C66.1941 34.6213 66.3488 34.7227 66.5301 34.776C66.7115 34.8187 66.8768 34.84 67.0261 34.84H67.2181V35H62.1301ZM64.5941 24.984C64.2848 24.984 64.0181 24.8933 63.7941 24.712C63.5808 24.52 63.4741 24.2267 63.4741 23.832C63.4741 23.4267 63.5861 23.1333 63.8101 22.952C64.0341 22.7707 64.3008 22.68 64.6101 22.68C64.9088 22.68 65.1701 22.7707 65.3941 22.952C65.6181 23.1333 65.7301 23.4267 65.7301 23.832C65.7301 24.2267 65.6181 24.52 65.3941 24.712C65.1701 24.8933 64.9035 24.984 64.5941 24.984ZM73.9311 35.16C73.2165 35.16 72.6458 34.9733 72.2191 34.6C71.7925 34.2267 71.5791 33.5707 71.5791 32.632V26.584H70.3791V26.424C70.9018 26.424 71.3605 26.3707 71.7551 26.264C72.1498 26.1573 72.4911 25.9867 72.7791 25.752C73.0458 25.5387 73.2645 25.272 73.4351 24.952C73.6165 24.6213 73.7551 24.2373 73.8511 23.8H74.0111V26.424H76.0591V26.584H74.0111V33.352C74.0111 33.8533 74.1071 34.2213 74.2991 34.456C74.4911 34.6907 74.7738 34.808 75.1471 34.808C75.2965 34.808 75.4565 34.792 75.6271 34.76C75.8085 34.728 76.0005 34.6747 76.2031 34.6V34.76C76.0325 34.8347 75.7498 34.92 75.3551 35.016C74.9711 35.112 74.4965 35.16 73.9311 35.16Z"
                                            fill="white"/>
                                    </g>
                                    <defs>
                                        <filter id="filter0_d_10280_40864" x="24.3525" y="12.6802" width="61.8506"
                                                height="36.1597" filterUnits="userSpaceOnUse"
                                                colorInterpolationFilters="sRGB">
                                            <feFlood floodOpacity="0" result="BackgroundImageFix"/>
                                            <feColorMatrix in="SourceAlpha" type="matrix"
                                                           values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0"
                                                           result="hardAlpha"/>
                                            <feOffset/>
                                            <feGaussianBlur stdDeviation="5"/>
                                            <feComposite in2="hardAlpha" operator="out"/>
                                            <feColorMatrix type="matrix"
                                                           values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.1 0"/>
                                            <feBlend mode="normal" in2="BackgroundImageFix"
                                                     result="effect1_dropShadow_10280_40864"/>
                                            <feBlend mode="normal" in="SourceGraphic"
                                                     in2="effect1_dropShadow_10280_40864" result="shape"/>
                                        </filter>
                                    </defs>
                                </svg>
                            }

                        </div>
                    </div>
                </div>
            </div>
        </div>
    )
}

export default Merge
